#include <iostream>
#include <string>
#include <sstream>

namespace cs540{

struct WrongNumberOfArgs{
    std::string message;
    WrongNumberOfArgs(std::string const &mesg)
        : message(mesg)
    {}
    //std::string toString() {return message;}
};

//std::ostringstream final_output;
std::string Interpolate(const char * output)
{
    std::ostringstream base;
    while(*output)
    {
        if(*output == '\\')
        { 
            output++;
            base << *output++;
        }
        else if (*output == '%')
        {
            throw WrongNumberOfArgs("wrong number of arguments\n");
        }
        base << *output++;
    }
    return base.str();
}

template <typename T, typename... Formats>
std::string Interpolate(const char * output, T value, Formats... format)
{
    std::ostringstream final_output;
    while (*output)
    {
        if (*output == '\\' && *(output + 1) == '%')
        {
            output++;
            final_output << *output++ ;
        }
        else if (*output == '%')
        {
            final_output << value;
            //Interpolate(output+1, format...);
            final_output << Interpolate(output+1, format...);
           // return final_output.str();
        } else {
            final_output << *output++;
        }
    }
    return final_output.str();
}

};


int main (void)
{
    int i = 1234;
    double x = 3.14;
    std::string str("foo");
    //std::streambuf *old = std::cout.rdbuf(buffer.rdbuf());
    std::cout << cs540::Interpolate(R"(i=%, x1=%, str=%, str2=%,third=%\%, finised)", i, x, str, "hello", "test") << std::endl;
    //Interpolate(R"(i=%, x1=%, str=%)", i, x, str);
}

